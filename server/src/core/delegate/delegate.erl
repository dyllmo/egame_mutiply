%%--------------------------------------------------------------------------------------------------------------
%% Author : wu_huidong@126.com
%% Created by : 吴惠冬
%% Description : 委托
%%--------------------------------------------------------------------------------------------------------------
-module(delegate).

-export([
	start/0,					%%-----启动
	srv_name/1,					%%-----进程名
	srv_count/0,				%%-----进程数量
	apply/3,					%%-----同步委托(当前pid选择进程)
	apply/4,					%%-----同步委托
	async_apply/3,				%%-----异步委托(当前pid选择进程)
	async_apply/4,				%%-----异步委托
	apply_after/2,				%%-----设置计时器(当前pid选择进程)
	apply_after/3,				%%-----设置计时器
	apply_after_cancel/1		%%-----取消计时器
]).
	
%%-----委托进程数量
-define(DELEGATE_SRV_COUNT,100).

%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 启动
%% @end
%%--------------------------------------------------------------------------------------------------------------
start () ->
	delegate_sup:start_link().
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 进程名
%% @end
%%--------------------------------------------------------------------------------------------------------------
srv_name (Id) ->
	NameStr = atom_to_list(?MODULE) ++ "_" ++ integer_to_list(Id),
	list_to_atom(NameStr).

%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 委托进程数量
%% @end
%%--------------------------------------------------------------------------------------------------------------
srv_count () -> ?DELEGATE_SRV_COUNT.
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% pid转进程名
%% @end
%%--------------------------------------------------------------------------------------------------------------
pid_to_srv_name (Pid) ->
	Mpid = lib_misc:pid_b(Pid),
	srv_name(Mpid rem ?DELEGATE_SRV_COUNT).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 同步委托(当前pid选择进程)
%% @end
%%--------------------------------------------------------------------------------------------------------------
apply (M, F, A) ->
	apply(self(),M,F,A).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 同步委托
%% @end
%%--------------------------------------------------------------------------------------------------------------
apply (Pid, M, F, A) ->
	SrvName = pid_to_srv_name(Pid),
	delegate_srv:apply(SrvName,M,F,A).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 异步委托(当前pid选择进程)
%% @end
%%--------------------------------------------------------------------------------------------------------------
async_apply (M, F, A) ->
	async_apply(self(),M,F,A).

%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 异步委托
%% @end
%%--------------------------------------------------------------------------------------------------------------
async_apply (Pid, M, F, A) ->
	SrvName = pid_to_srv_name(Pid),
	delegate_srv:async_apply(SrvName,M,F,A).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 设置计时器(当前pid选择进程)
%% @end
%%--------------------------------------------------------------------------------------------------------------
apply_after (Time, {M, F, A}) ->
	apply_after(self(),Time,{M,F,A}).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 设置计时器
%% @end
%%--------------------------------------------------------------------------------------------------------------
apply_after (Pid, Time, {M, F, A}) ->
	SrvName = pid_to_srv_name(Pid),
    TimerRef = erlang:send_after(Time,SrvName,{apply,M,F,A}),
    {apply_after_ref,TimerRef}.
    
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 取消计时器
%% @end
%%--------------------------------------------------------------------------------------------------------------
apply_after_cancel ({apply_after_ref, TimerRef}) ->
    erlang:cancel_timer(TimerRef).