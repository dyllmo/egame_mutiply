%%--------------------------------------------------------------------------------------------------------------
%% Author : wu_huidong@126.com
%% Created by : 吴惠冬
%% Description : 集群节点管理
%%--------------------------------------------------------------------------------------------------------------
-module(cluster).

-export([
	init/0,							%%-----初始化
	get_node_list/0,         		%%-----获取节点列表
	get_node_info_list/0,         	%%-----获取节点信息列表
	tid_get_sid_list/1,         	%%-----按tid获取sid列表
	tid_get_node_list/1,         	%%-----按tid获取node列表
    trace_apply/3          			%%-----调用并返记录堆栈信息
]).

-export([
	sid_get_node/1,          		%%-----按sid获取节点
    tid_get_node/1,          		%%-----按tid获取节点
    tcid_get_node/1,          		%%-----按{tid,cid}获取节点
    tcbid_get_node/1,          		%%-----按{tid,cid,bid}获取节点
	player_id_get_node/1         	%%-----按玩家id获取节点
]).

-export([
	sid_ping/1,          			%%-----按sid测试节点
    tid_ping/1,          			%%-----按tid测试节点
    tcid_ping/1,          			%%-----按{tid,cid}测试节点
    tcbid_ping/1,          			%%-----按{tid,cid,bid}测试节点
	player_id_ping/1         		%%-----按玩家id测试节点
]).

-export([
	sid_call/4, 					%%-----按sid同步调用
    tid_call/4, 					%%-----按tid同步调用
    tcid_call/4, 					%%-----按{tid,cid}同步调用
    tcbid_call/4, 					%%-----按{tid,cid,bid}同步调用
	player_id_call/4 				%%-----按玩家id同步调用
]).

-export([
	sid_cast/4, 					%%-----按sid异步调用
	tid_cast/4, 					%%-----按tid异步调用
	tcid_cast/4, 					%%-----按{tid,cid}异步调用
	tcbid_cast/4, 					%%-----按{tid,cid,bid}异步调用
	player_id_cast/4 				%%-----按玩家id异步调用
]).

-export([
	sid_trace_call/4,         		%%-----按sid同步追踪调用
	tid_trace_call/4,         		%%-----按tid同步追踪调用
	tcid_trace_call/4,         		%%-----按{tid,cid}同步追踪调用
	tcbid_trace_call/4,         	%%-----按{tid,cid,bid}同步追踪调用
	player_id_trace_call/4        	%%-----按玩家id同步追踪调用
]).

-export([
	sid_trace_cast/4,         		%%-----按sid异步追踪调用
    tid_trace_cast/4,         		%%-----按tid异步追踪调用
    tcid_trace_cast/4,         		%%-----按{tid,cid}异步追踪调用
    tcbid_trace_cast/4,         	%%-----按{tid,cid,bid}异步追踪调用
    player_id_trace_cast/4        	%%-----按玩家id异步追踪调用
]).

-include("game.hrl").

%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 初始化
%% @end
%%-------------------------------------------------------------------------------------------------------------
init ()->
	FileName = lib_misc:get_env_str(nodes_config,"./nodes.config"),
	case filelib:is_file(FileName) of
		true ->
			ok;
		false ->
			exit(bad_node_config)
	end,
	{ok,[NodeInfoList]} = file:consult(FileName),
	lib_ets:new(node_info1,[public,set,named_table,{keypos,#node_info1.sid}]),
	lib_ets:new(node_info2,[public,set,named_table,{keypos,#node_info2.tcb_id}]),
	lists:foreach(
		fun(NodeInfo)->
			Sid	 = maps:get(sid,NodeInfo),
			Tid	 = maps:get(tid,NodeInfo),
			Cid	 = maps:get(cid,NodeInfo),
			Bid	 = maps:get(bid,NodeInfo),
			Node = maps:get(node,NodeInfo),
			lib_ets:insert(node_info1,#node_info1{sid = Sid,tid = Tid,cid = Cid,bid = Bid,node = Node}),
			lib_ets:insert(node_info2,#node_info2{tcb_id = {Tid,Cid,Bid},sid = Sid,node = Node})
		end,
		NodeInfoList
	).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 获取节点列表
%% @end
%%-------------------------------------------------------------------------------------------------------------
get_node_list ()->
	lists:map(fun(NodeInfo) -> element(6,NodeInfo) end,get_node_info_list()).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 获取节点信息列表
%% @end
%%-------------------------------------------------------------------------------------------------------------
get_node_info_list ()->
    lib_ets:tab2list(node_info1).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按tid获取sid列表
%% @end
%%-------------------------------------------------------------------------------------------------------------
tid_get_sid_list (Tid) ->
	lists:foldl(
		fun(NodeInfo,L) -> 
			if
				NodeInfo #node_info1.tid == Tid ->
					[NodeInfo #node_info1.sid|L];
				true ->
					L
			end
		end,
		[],
		get_node_info_list()
	).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按tid获取node列表
%% @end
%%-------------------------------------------------------------------------------------------------------------
tid_get_node_list (Tid) ->
	lists:foldl(
		fun(NodeInfo,L) -> 
			if
				NodeInfo #node_info1.tid == Tid ->
					[NodeInfo #node_info1.node|L];
				true ->
					L
			end
		end,
		[],
		get_node_info_list()
	).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按sid获取节点
%% @end
%%-------------------------------------------------------------------------------------------------------------
sid_get_node (Sid) ->
    case lib_ets:get(node_info1,Sid) of
        [] -> 
			not_find_node;
        [NodeInfo] -> 
			NodeInfo #node_info1.node
    end.
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按tid获取节点
%% @end
%%-------------------------------------------------------------------------------------------------------------
tid_get_node (Tid) -> 
	tcid_get_node({Tid,1}).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按{tid,cid}获取节点
%% @end
%%-------------------------------------------------------------------------------------------------------------
tcid_get_node ({Tid,Cid}) -> 
	tcbid_get_node({Tid,Cid,?BID}).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按{tid,cid,bid}获取节点
%% @end
%%-------------------------------------------------------------------------------------------------------------
tcbid_get_node (Tcbid) ->
    case lib_ets:get(node_info2,Tcbid) of
        [] -> 
			not_find_node;
        [NodeInfo] -> 
			NodeInfo #node_info2.node
    end.

%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按玩家id获取节点
%% @end
%%-------------------------------------------------------------------------------------------------------------
player_id_get_node (PlayerId) ->
    Cid = PlayerId div ?PLAYER_SRV_ID_INDEX,
	tcbid_get_node({?SERVER_T_LOGIC,Cid,?BID}).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按sid测试节点
%% @end
%%-------------------------------------------------------------------------------------------------------------
sid_ping (Sid) ->
	case sid_get_node(Sid) of
		not_find_node ->
			pang;
		Node ->
			net_adm:ping(Node)
	end.
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按tid测试节点
%% @end
%%-------------------------------------------------------------------------------------------------------------
tid_ping (Tid) -> 
	tcid_ping({Tid,1}).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按{tid,cid}测试节点
%% @end
%%-------------------------------------------------------------------------------------------------------------
tcid_ping ({Tid,Cid}) -> 
	tcbid_ping({Tid,Cid,?BID}).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按{tid,cid,bid}测试节点
%% @end
%%-------------------------------------------------------------------------------------------------------------
tcbid_ping (Tcbid) ->
	case tcbid_get_node(Tcbid) of
		not_find_node ->
			pang;
		Node ->
			net_adm:ping(Node)
	end.

%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按玩家id测试节点
%% @end
%%-------------------------------------------------------------------------------------------------------------
player_id_ping (PlayerId) ->
    case player_id_get_node(PlayerId) of
		not_find_node ->
			pang;
		Node ->
			net_adm:ping(Node)
	end.
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按sid同步调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
sid_call (Sid, M, F, A)->
	case sid_get_node(Sid) of
		not_find_node ->
			{badrpc,nodedown};
		Node ->
			case node() of
				Node ->
					apply(M,F,A);
				_ ->
					rpc:call(Node,M,F,A)
			end
	end.
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按sid异步调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
sid_cast (Sid, M, F, A)->
	case sid_get_node(Sid) of
		not_find_node ->
			ok;
		Node ->
			case node() of
				Node ->
					spawn(M,F,A);
				_ ->
					rpc:cast(Node,M,F,A)
			end
	end.
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按tid同步调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
tid_call (Tid, M, F, A) ->
	tcid_call({Tid,1},M,F,A).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按{tid,cid}同步调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
tcid_call ({Tid,Cid}, M, F, A) ->
	tcbid_call({Tid,Cid,?BID},M,F,A).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按{tid,cid,bid}同步调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
tcbid_call (Tcbid, M, F, A)->
	case tcbid_get_node(Tcbid) of
		not_find_node ->
			{badrpc,nodedown};
		Node ->
			case node() of
				Node ->
					apply(M,F,A);
				_ ->
					rpc:call(Node,M,F,A)
			end
	end.
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按tid异步调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
tid_cast (Tid, M, F, A) ->
	tcid_cast({Tid,1},M,F,A).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按{tid,cid}异步调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
tcid_cast ({Tid,Cid}, M, F, A) ->
	tcbid_cast({Tid,Cid,?BID},M,F,A).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按{tid,cid,bid}异步调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
tcbid_cast (Tcbid, M, F, A)->
	case tcbid_get_node(Tcbid) of
		not_find_node ->
			ok;
		Node ->
			case node() of
				Node ->
					spawn(M,F,A);
				_ ->
					rpc:cast(Node,M,F,A)
			end
	end.
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按玩家id同步调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
player_id_call (PlayerId, M, F, A)->
	case tcbid_get_node(PlayerId) of
		not_find_node ->
			{badrpc,nodedown};
		Node ->
			case node() of
				Node ->
					apply(M,F,A);
				_ ->
					rpc:call(Node,M,F,A)
			end
	end.

%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按玩家id异步调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
player_id_cast (PlayerId, M, F, A) ->
	case tcbid_get_node(PlayerId) of
		not_find_node ->
			ok;
		Node ->
			case node() of
				Node ->
					spawn(M,F,A);
				_ ->
					rpc:cast(Node,M,F,A)
			end
	end.
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按sid同步追踪调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
sid_trace_call (Sid, M, F, A) ->
	sid_call(Sid,?MODULE,trace_apply,[M,F,A]).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按sid同步追踪调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
sid_trace_cast (Sid, M, F, A) ->
	sid_cast(Sid,?MODULE,trace_apply,[M,F,A]).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按tid同步追踪调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
tid_trace_call(Tid, M, F, A) ->
	tid_call(Tid,?MODULE,trace_apply,[M,F,A]).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按{tid,cid}同步追踪调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
tcid_trace_call(Tcid, M, F, A) ->
	tcid_call(Tcid,?MODULE,trace_apply,[M,F,A]).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按{tid,cid,bid}同步追踪调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
tcbid_trace_call(Tcbid, M, F, A) ->
	tcbid_call(Tcbid,?MODULE,trace_apply,[M,F,A]).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按tid异步追踪调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
tid_trace_cast(Tid, M, F, A) ->
	tid_cast(Tid,?MODULE,trace_apply,[M,F,A]).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按{tid,cid}异步追踪调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
tcid_trace_cast(Tcid, M, F, A) ->
	tcid_cast(Tcid,?MODULE,trace_apply,[M,F,A]).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按{tid,cid,bid}异步追踪调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
tcbid_trace_cast(Tcbid, M, F, A) ->
	tcbid_cast(Tcbid,?MODULE,trace_apply,[M,F,A]).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按玩家id同步追踪调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
player_id_trace_call (PlayerId, M, F, A) ->
	player_id_call(PlayerId,?MODULE,trace_apply,[M,F,A]).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 按玩家id同步追踪调用
%% @end
%%-------------------------------------------------------------------------------------------------------------
player_id_trace_cast (PlayerId, M, F, A) ->
	player_id_cast(PlayerId,?MODULE,trace_apply,[M,F,A]).
	
%%-------------------------------------------------------------------------------------------------------------
%% @doc
%% 调用并返记录堆栈信息
%% @end
%%-------------------------------------------------------------------------------------------------------------
trace_apply(M, F, A) ->
	try apply(M,F,A) of
		Return ->
			Return
	catch
		throw : Reason : _ ->
			Reason;
		_ : Reason : Stack ->
			?ERROR(
				"cluster_trace_apply_error:~n"
				"    module   => ~p~n"
				"    function => ~p~n"
				"    args     => ~w~n"
				"    reason   => ~p~n"
				"    stack    => ~p~n",
				[M,F,A,Reason,Stack]
			),
			{badrpc,'EXIT',Reason}
	end.