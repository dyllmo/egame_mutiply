%%--------------------------------------------------------------------------------------------------------------
%% Author : wu_huidong@126.com
%% Created by : 吴惠冬
%% Description : 数据库相关
%%--------------------------------------------------------------------------------------------------------------
-module(database).

-export([start/0]).			%%-----启动

-export([
	read/1,					%%-----读取
	select/2,				%%-----查询(不分表)
	select/3,				%%-----查询(分表)
	write/1,				%%-----写入
	delete/1,				%%-----删除
	delete_select/2,		%%-----条件删除(不分表)
	delete_select/3,		%%-----条件删除(分表)
	delete_all/1,			%%-----删除所有
	do/1					%%-----执行事务
]).

-export([
	init/0,					%%-----初始化
	dump/0,					%%-----dump(等待数据同步完成)
	dump/1,					%%-----dump(选择是否等待数据同步完成后开始dump))
	count/0,				%%-----数据数量(库)
	count/1,				%%-----数据数量(表)
	memory/0,				%%-----内存(库)
	memory/1,				%%-----内存(表)
	ets/1,					%%-----ETS表
	ets/2,					%%-----ETS表(分表)
	table/1,				%%-----表结构
	tab2list/1,				%%-----表数据
	init_ets/1,				%%-----初始化ETS表
	init_ets/2,				%%-----初始化ETS表(分表)
	get_element/2,			%%-----获取位置记录值
	set_element/3,			%%-----设置位置记录值
	get_spilit_id/1,		%%-----获取分表id
	val_to_bin/1			%%-----值转变binary
]).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 启动
%% @end
%%--------------------------------------------------------------------------------------------------------------
start () ->
	Result = database_sup:start_link(),
	ok = codedb:create(),
	Result.
			
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 读取
%% @end
%%--------------------------------------------------------------------------------------------------------------
read (Record) -> 
	database_curd:read(Record).

%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 查询(不分表)
%% @end
%%--------------------------------------------------------------------------------------------------------------
select (Table, MatchSpec) -> 
	database_curd:select(Table,MatchSpec).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 查询(分表)
%% @end
%%--------------------------------------------------------------------------------------------------------------
select (Table, ModeOrSpilitId, MatchSpec) -> 
	database_curd:select(Table,ModeOrSpilitId,MatchSpec).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 写入
%% @end
%%--------------------------------------------------------------------------------------------------------------
write (Record) ->
	database_curd:write(Record).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 删除
%% @end
%%--------------------------------------------------------------------------------------------------------------
delete (Record) ->
	database_curd:delete(Record).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 条件删除(不分表)
%% @end
%%--------------------------------------------------------------------------------------------------------------
delete_select (Table, MatchSpec) -> 
	database_curd:delete_select(Table,MatchSpec).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 条件删除(分表)
%% @end
%%--------------------------------------------------------------------------------------------------------------
delete_select (Table, ModeOrSpilitId, MatchSpec) -> 
	database_curd:delete_select(Table,ModeOrSpilitId,MatchSpec).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 删除所有
%% @end
%%--------------------------------------------------------------------------------------------------------------
delete_all (Table) ->
	database_curd:delete_all(Table).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 执行事务
%% @end
%%--------------------------------------------------------------------------------------------------------------
do (Tran) ->
	database_curd:do(Tran).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 初始化
%% @end
%%--------------------------------------------------------------------------------------------------------------
init () ->
	database_init:start().
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% dump(等待数据同步完成)
%% @end
%%--------------------------------------------------------------------------------------------------------------
dump () ->
	database_dump:start().
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% dump(选择是否等待数据同步完成后开始dump)
%% @end
%%--------------------------------------------------------------------------------------------------------------
dump (IsStop) ->
	database_dump:start(IsStop).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 数据数量(库)
%% @end
%%--------------------------------------------------------------------------------------------------------------
count () ->
	lists:foldl(fun(Table,Size) -> Size + count(Table) end,0,database_lib:table_list()).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 数据数量(表)
%% @end
%%--------------------------------------------------------------------------------------------------------------
count (Table) -> 
	case database_lib:has_spilit(Table) of
		true ->
			SpilitCount = database_lib:spilit_count(),
			lists:foldl(
				fun(I,S) ->
					ETable = ets(Table,I),
					S + lib_ets:size(ETable)
				end,
				0, 
				lists:seq(0,SpilitCount -1)
			);
		false ->
			ETable = ets(Table),
			lib_ets:size(ETable)
	end.
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 内存(库)
%% @end
%%--------------------------------------------------------------------------------------------------------------
memory () ->
	lists:foldl(fun(Table,Size) -> Size + memory(Table) end,0,database_lib:table_list()).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 内存(表)
%% @end
%%--------------------------------------------------------------------------------------------------------------
memory (Table) -> 
	case database_lib:has_spilit(Table) of
		true ->
			SpilitCount = database_lib:spilit_count(),
			lists:foldl(
				fun(I,M) ->
					ETable = ets(Table,I),
					M + lib_ets:memory(ETable)
				end,
				0,
				lists:seq(0,SpilitCount - 1)
			);
		false ->
			ETable = ets(Table),
			lib_ets:memory(ETable)
	end.
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% ETS表
%% @end
%%--------------------------------------------------------------------------------------------------------------
ets (Table) ->
	erlang:list_to_atom("t_" ++ atom_to_list(Table)).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% ETS表(分表)
%% @end
%%--------------------------------------------------------------------------------------------------------------
ets (Table, N) ->
	erlang:list_to_atom("t_" ++ atom_to_list(Table) ++ integer_to_list(N)).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 表结构
%% @end
%%--------------------------------------------------------------------------------------------------------------
table (Table) ->
	ETable = ets(Table),
	[ets:table(ETable)].
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 表数据
%% @end
%%--------------------------------------------------------------------------------------------------------------
tab2list (Table) ->
	case database_lib:has_spilit(Table) of
		true ->
			SpilitCount = database_lib:spilit_count(),
			lists:foldl(
				fun(I,L) ->
					ETable = ets(Table,I),
					L ++ lib_ets:tab2list(ETable)
				end,
				[],
				lists:seq(0,SpilitCount - 1)
			);
		false ->
			ETable = ets(Table),
			lib_ets:tab2list(ETable)
	end.
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 初始化ETS表
%% @end
%%--------------------------------------------------------------------------------------------------------------
init_ets (Table) ->
	ETable = ets(Table),
	lib_ets:new(ETable,[public,set,named_table,{keypos,2}]).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 初始化ETS表(分表)
%% @end
%%--------------------------------------------------------------------------------------------------------------
init_ets (Table, N) ->
	ETable = ets(Table,N),
	lib_ets:new(ETable,[public,set,named_table,{keypos,2}]).
	
%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 获取位置记录值
%% @end
%%--------------------------------------------------------------------------------------------------------------
get_element (N, Record) ->
	erlang:element(N + 2,Record).

%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 设置位置记录值
%% @end
%%--------------------------------------------------------------------------------------------------------------
set_element (N, Record, Value) ->
	erlang:setelement(N + 2,Record,Value).

%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 获取分表id
%% @end
%%--------------------------------------------------------------------------------------------------------------
get_spilit_id (SpilitVal) ->
	SpilitCount = database_lib:spilit_count(),
	SpilitVal rem SpilitCount.

%%--------------------------------------------------------------------------------------------------------------
%% @doc
%% 值转变binary
%% @end
%%--------------------------------------------------------------------------------------------------------------
val_to_bin (undefined) -> <<"NULL">>;
val_to_bin (null) -> <<"NULL">>;
val_to_bin (Value) when is_integer(Value) ->
	erlang:list_to_binary(integer_to_list(Value));
val_to_bin (Value) when is_float(Value) ->
	list_to_binary(float_to_list(Value));
val_to_bin (Value) when is_list(Value) ->
	Value2 = escape_str(Value,[]),
	Bin = list_to_binary(Value2),
	<<"'",Bin/binary,"'">>;
val_to_bin (_) -> erlang:error(nonsupport_type).

escape_str ([], Result) -> lists:reverse(Result);
escape_str ([$' | String], Result) -> escape_str(String, [$' | [$\ | Result]]);
escape_str ([$" | String], Result) -> escape_str(String, [$" | [$\\ | Result]]);
escape_str ([$\ | String], Result) -> escape_str(String, [$\ | [$\ | Result]]);
escape_str ([Char | String], Result) -> escape_str(String, [Char | Result]).